https://leetcode.com/problems/lfu-cache


class LFUCache {
    int capacity;
    int cursize;
    int minfreq;
    HashMap<Integer, DoubleLinkedList> freq;
    HashMap<Integer, DLNode> cache;

    class DLNode {
        DLNode prev, next;
        int key, value;
        int frequency;

        DLNode(int _key, int _value) {
            key = _key;
            value = _value;
            frequency = 1;
        }
    }

    class DoubleLinkedList {
        DLNode head;
        DLNode tail;
        int listSize;

        public DoubleLinkedList() {
            this.listSize = 0;
            this.head = new DLNode(0, 0);
            this.tail = new DLNode(0, 0);
            head.next = tail;
            tail.prev = head;
        }

        public void addNode(DLNode node) {
            DLNode nextNode = head.next;
            node.next = nextNode;
            nextNode.prev = node;
            node.prev = head;
            head.next = node;
            listSize++;
        }

        public void removeNode(DLNode node) {
            DLNode prevNode = node.prev;
            DLNode nextNode = node.next;
            prevNode.next = nextNode;
            nextNode.prev = prevNode;
            listSize--;
        }
    }

    public LFUCache(int capacity) {
        this.capacity = capacity;
        this.cursize = 0;
        this.minfreq = 0;
        this.freq = new HashMap<>();
        this.cache = new HashMap<>();
    }

    public int get(int key) {
        DLNode curNode = cache.get(key);
        if (curNode == null) {
            return -1;
        }
        update(curNode);
        return curNode.value;
    }

    private void update(DLNode curNode) {
        int curFreq = curNode.frequency;
        DoubleLinkedList curList = freq.get(curFreq);
        curList.removeNode(curNode);

        if (curFreq == minfreq && curList.listSize == 0) {
            minfreq++;
        }

        curNode.frequency++;
        DoubleLinkedList newList = freq.getOrDefault(curNode.frequency, new DoubleLinkedList());
        newList.addNode(curNode);
        freq.put(curNode.frequency, newList);
    }

    public void put(int key, int value) {
        if (capacity == 0) return;

        if (cache.containsKey(key)) {
            DLNode curNode = cache.get(key);
            curNode.value = value;
            update(curNode);
        } else {
            cursize++;
            if (cursize > capacity) {
                DoubleLinkedList minList = freq.get(minfreq);
                DLNode nodeToRemove = minList.tail.prev;
                cache.remove(nodeToRemove.key);
                minList.removeNode(nodeToRemove);
                cursize--;
            }
            minfreq = 1;
            DLNode newNode = new DLNode(key, value);
            DoubleLinkedList newList = freq.getOrDefault(1, new DoubleLinkedList());
            newList.addNode(newNode);
            freq.put(1, newList);
            cache.put(key, newNode);
        }
    }
}

/**
 * Your LFUCache object will be instantiated and called as such:
 * LFUCache obj = new LFUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
